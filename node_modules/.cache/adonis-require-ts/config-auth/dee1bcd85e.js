"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const authConfig = {
    guard: 'web',
    guards: {
        web: {
            driver: 'session',
            provider: {
                driver: 'lucid',
                identifierKey: 'id',
                uids: ['email', 'username'],
                model: () => Promise.resolve().then(() => __importStar(global[Symbol.for('ioc.use')]('App/Models/User'))),
            },
        },
    },
};
exports.default = authConfig;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImF1dGgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWtCQSxNQUFNLFVBQVUsR0FBZTtJQUM3QixLQUFLLEVBQUUsS0FBSztJQUNaLE1BQU0sRUFBRTtRQVdOLEdBQUcsRUFBRTtZQUNILE1BQU0sRUFBRSxTQUFTO1lBRWpCLFFBQVEsRUFBRTtnQkFTUixNQUFNLEVBQUUsT0FBTztnQkFXZixhQUFhLEVBQUUsSUFBSTtnQkFZbkIsSUFBSSxFQUFFLENBQUMsT0FBTyxFQUFFLFVBQVUsQ0FBQztnQkFhM0IsS0FBSyxFQUFFLEdBQUcsRUFBRSx5RUFBUSxpQkFBaUIsR0FBQzthQUN2QztTQUNGO0tBQ0Y7Q0FDRixDQUFBO0FBRUQsa0JBQWUsVUFBVSxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb25maWcgc291cmNlOiBodHRwczovL2dpdC5pby9KWTBtcFxuICpcbiAqIEZlZWwgZnJlZSB0byBsZXQgdXMga25vdyB2aWEgUFIsIGlmIHlvdSBmaW5kIHNvbWV0aGluZyBicm9rZW4gaW4gdGhpcyBjb25maWdcbiAqIGZpbGUuXG4gKi9cblxuaW1wb3J0IHR5cGUgeyBBdXRoQ29uZmlnIH0gZnJvbSAnQGlvYzpBZG9uaXMvQWRkb25zL0F1dGgnXG5cbi8qXG58LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbnwgQXV0aGVudGljYXRpb24gTWFwcGluZ1xufC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG58XG58IExpc3Qgb2YgYXZhaWxhYmxlIGF1dGhlbnRpY2F0aW9uIG1hcHBpbmcuIFlvdSBtdXN0IGZpcnN0IGRlZmluZSB0aGVtXG58IGluc2lkZSB0aGUgYGNvbnRyYWN0cy9hdXRoLnRzYCBmaWxlIGJlZm9yZSBtZW50aW9uaW5nIHRoZW0gaGVyZS5cbnxcbiovXG5jb25zdCBhdXRoQ29uZmlnOiBBdXRoQ29uZmlnID0ge1xuICBndWFyZDogJ3dlYicsXG4gIGd1YXJkczoge1xuICAgIC8qXG4gICAgfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgfCBXZWIgR3VhcmRcbiAgICB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICB8XG4gICAgfCBXZWIgZ3VhcmQgdXNlcyBjbGFzc2ljIG9sZCBzY2hvb2wgc2Vzc2lvbnMgZm9yIGF1dGhlbnRpY2F0aW5nIHVzZXJzLlxuICAgIHwgSWYgeW91IGFyZSBidWlsZGluZyBhIHN0YW5kYXJkIHdlYiBhcHBsaWNhdGlvbiwgaXQgaXMgcmVjb21tZW5kZWQgdG9cbiAgICB8IHVzZSB3ZWIgZ3VhcmQgd2l0aCBzZXNzaW9uIGRyaXZlclxuICAgIHxcbiAgICAqL1xuICAgIHdlYjoge1xuICAgICAgZHJpdmVyOiAnc2Vzc2lvbicsXG5cbiAgICAgIHByb3ZpZGVyOiB7XG4gICAgICAgIC8qXG4gICAgICAgIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICB8IERyaXZlclxuICAgICAgICB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgfFxuICAgICAgICB8IE5hbWUgb2YgdGhlIGRyaXZlclxuICAgICAgICB8XG4gICAgICAgICovXG4gICAgICAgIGRyaXZlcjogJ2x1Y2lkJyxcblxuICAgICAgICAvKlxuICAgICAgICB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgfCBJZGVudGlmaWVyIGtleVxuICAgICAgICB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgfFxuICAgICAgICB8IFRoZSBpZGVudGlmaWVyIGtleSBpcyB0aGUgdW5pcXVlIGtleSBvbiB0aGUgbW9kZWwuIEluIG1vc3QgY2FzZXMgc3BlY2lmeWluZ1xuICAgICAgICB8IHRoZSBwcmltYXJ5IGtleSBpcyB0aGUgcmlnaHQgY2hvaWNlLlxuICAgICAgICB8XG4gICAgICAgICovXG4gICAgICAgIGlkZW50aWZpZXJLZXk6ICdpZCcsXG5cbiAgICAgICAgLypcbiAgICAgICAgfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgIHwgVWlkc1xuICAgICAgICB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgfFxuICAgICAgICB8IFVpZHMgYXJlIHVzZWQgdG8gc2VhcmNoIGEgdXNlciBhZ2FpbnN0IG9uZSBvZiB0aGUgbWVudGlvbmVkIGNvbHVtbnMuIER1cmluZ1xuICAgICAgICB8IGxvZ2luLCB0aGUgYXV0aCBtb2R1bGUgd2lsbCBzZWFyY2ggdGhlIHVzZXIgbWVudGlvbmVkIHZhbHVlIGFnYWluc3Qgb25lXG4gICAgICAgIHwgb2YgdGhlIG1lbnRpb25lZCBjb2x1bW5zIHRvIGZpbmQgdGhlaXIgdXNlciByZWNvcmQuXG4gICAgICAgIHxcbiAgICAgICAgKi9cbiAgICAgICAgdWlkczogWydlbWFpbCcsICd1c2VybmFtZSddLFxuXG4gICAgICAgIC8qXG4gICAgICAgIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICB8IE1vZGVsXG4gICAgICAgIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICB8XG4gICAgICAgIHwgVGhlIG1vZGVsIHRvIHVzZSBmb3IgZmV0Y2hpbmcgb3IgZmluZGluZyB1c2Vycy4gVGhlIG1vZGVsIGlzIGltcG9ydGVkXG4gICAgICAgIHwgbGF6aWx5IHNpbmNlIHRoZSBjb25maWcgZmlsZXMgYXJlIHJlYWQgd2F5IGVhcmxpZXIgaW4gdGhlIGxpZmVjeWNsZVxuICAgICAgICB8IG9mIGJvb3RpbmcgdGhlIGFwcCBhbmQgdGhlIG1vZGVscyBtYXkgbm90IGJlIGluIGEgdXNhYmxlIHN0YXRlIGF0XG4gICAgICAgIHwgdGhhdCB0aW1lLlxuICAgICAgICB8XG4gICAgICAgICovXG4gICAgICAgIG1vZGVsOiAoKSA9PiBpbXBvcnQoJ0FwcC9Nb2RlbHMvVXNlcicpLFxuICAgICAgfSxcbiAgICB9LFxuICB9LFxufVxuXG5leHBvcnQgZGVmYXVsdCBhdXRoQ29uZmlnXG4iXX0=