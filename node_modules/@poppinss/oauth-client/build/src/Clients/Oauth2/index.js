"use strict";
/*
 * @poppinss/oauth-client
 *
 * (c) Harminder Virk <virk@adonisjs.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Oauth2Client = void 0;
const querystring_1 = require("querystring");
const luxon_1 = require("luxon");
const HttpClient_1 = require("../../HttpClient");
const UrlBuilder_1 = require("../../UrlBuilder");
const Exceptions_1 = require("../../Exceptions");
const utils_1 = require("../../utils");
/**
 * A generic implementation of OAuth2. One can use it directly with any auth2.0 server
 */
class Oauth2Client {
    constructor(options) {
        this.options = options;
        /**
         * Define the authorize url. Can be overridden by config
         */
        this.authorizeUrl = '';
        /**
         * Define the access token url. Can be overridden by config
         */
        this.accessTokenUrl = '';
    }
    /**
     * Processing the API client response. The child class can overwrite it
     * for more control
     */
    processClientResponse(client, response) {
        /**
         * Return json as it is when parsed response as json
         */
        if (client.responseType === 'json') {
            return response;
        }
        return (0, querystring_1.parse)(client.responseType === 'buffer' ? response.toString() : response);
    }
    /**
     * Configure the redirect request. Invoked before
     * the user callback.
     *
     * The client defaults can be removed using the `clearParam` method
     */
    configureRedirectRequest(_) { }
    /**
     * Configure the access token request. Invoked before
     * the user callback.
     *
     * The client defaults can be removed using the `clearParam` or
     * `clearOauth1Param` methods
     */
    configureAccessTokenRequest(_) { }
    /**
     * Returns the instance of the HTTP client for internal use
     */
    httpClient(url) {
        return new HttpClient_1.HttpClient(url);
    }
    /**
     * Returns the instance of the URL builder
     */
    urlBuilder(url) {
        return new UrlBuilder_1.UrlBuilder(url);
    }
    /**
     * Returns the redirect url for redirecting the user. Pre-defines
     * the following params
     *
     * - redirect_uri
     * - client_id
     */
    getRedirectUrl(callback) {
        const authorizeUrl = this.options.authorizeUrl || this.authorizeUrl;
        if (!authorizeUrl) {
            throw new utils_1.Exception('Cannot make redirect url without "authorizeUrl"');
        }
        const urlBuilder = this.urlBuilder(authorizeUrl);
        /**
         * Default params. One can call `clearParam` to remove them
         */
        urlBuilder.param('redirect_uri', this.options.callbackUrl);
        urlBuilder.param('client_id', this.options.clientId);
        this.configureRedirectRequest(urlBuilder);
        /**
         * Invoke callback when defined. This is the place where one can configure
         * the request query params
         */
        if (typeof callback === 'function') {
            callback(urlBuilder);
        }
        return urlBuilder.makeUrl();
    }
    /**
     * Generates a random token to be stored as a state and to be sent along
     * for later verification
     */
    getState() {
        return (0, utils_1.generateRandom)(32);
    }
    /**
     * Verifies the redirect input with the state input
     */
    verifyState(state, inputValue) {
        if (!state || state !== inputValue) {
            throw Exceptions_1.OauthException.stateMisMatch();
        }
    }
    /**
     * Get the access token from the authorization code. One must define
     * the authorization code using the callback input.
     *
     * ```ts
     * client.getAccessToken((request) => {
     *   request.field('code', authorizationCode)
     * })
     * ```
     *
     * Pre-defines the following form fields
     *
     * - grant_type = 'authorization_code'
     * - redirect_uri
     * - client_id
     * - client_secret
     */
    async getAccessToken(callback) {
        const accessTokenUrl = this.options.accessTokenUrl || this.accessTokenUrl;
        if (!accessTokenUrl) {
            throw new utils_1.Exception('Cannot get access token without "accessTokenUrl"');
        }
        const httpClient = this.httpClient(accessTokenUrl);
        /**
         * Default field. One can call `clearField` to remove them
         */
        httpClient.field('grant_type', 'authorization_code');
        httpClient.field('redirect_uri', this.options.callbackUrl);
        httpClient.field('client_id', this.options.clientId);
        httpClient.field('client_secret', this.options.clientSecret);
        /**
         * Expecting JSON response. One call call `parseAs('text')` for urlencoded
         * response
         */
        httpClient.parseAs('json');
        this.configureAccessTokenRequest(httpClient);
        /**
         * Invoke the user callback after setting defaults. This allows the callback
         * to clear/overwrite them
         */
        if (typeof callback === 'function') {
            callback(httpClient);
        }
        /**
         * Make request and parse response
         */
        const response = await httpClient.post();
        const { access_token: accessToken, token_type: tokenType, expires_in: expiresIn, refresh_token: refreshToken, ...parsed } = this.processClientResponse(httpClient, response);
        /**
         * We expect the response to have "access_token"
         */
        if (!accessToken) {
            throw Exceptions_1.OauthException.missingAccessToken(parsed);
        }
        return {
            token: accessToken,
            type: tokenType,
            expiresIn,
            ...(expiresIn ? { expiresAt: luxon_1.DateTime.local().plus({ seconds: expiresIn }) } : {}),
            refreshToken,
            ...parsed,
        };
    }
}
exports.Oauth2Client = Oauth2Client;
