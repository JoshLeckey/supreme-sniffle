"use strict";
/*
 * @poppinss/oauth-client
 *
 * (c) Harminder Virk <virk@adonisjs.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HttpClient = void 0;
const got_1 = __importDefault(require("got"));
/**
 * An HTTP client abstraction we need for making Oauth requests
 */
class HttpClient {
    constructor(baseUrl) {
        this.baseUrl = baseUrl;
        this.requestType = 'urlencoded';
        this.responseType = 'text';
        this.params = {};
        this.fields = {};
        this.headers = {};
        this.oauth1Params = {};
    }
    /**
     * Returns the got options for the request
     */
    getGotOptions(requestMethod) {
        const hasBody = Object.keys(this.fields).length > 0;
        return {
            ...(hasBody
                ? this.requestType === 'json'
                    ? { json: this.fields }
                    : { form: this.fields }
                : {}),
            searchParams: this.params,
            allowGetBody: requestMethod === 'GET' && hasBody,
            headers: this.headers,
        };
    }
    /**
     * Returns the response body of the got instance
     */
    getResponseBody(request) {
        if (this.responseType === 'json') {
            return request.json();
        }
        if (this.responseType === 'text') {
            return request.text();
        }
        return request.buffer();
    }
    /**
     * Define query string param
     */
    param(key, value) {
        this.params[key] = value;
        return this;
    }
    /**
     * Remove a named param
     */
    clearParam(key) {
        delete this.params[key];
        return this;
    }
    /**
     * Define an oauth1 param that makes it way to the Authorization
     * header
     */
    oauth1Param(key, value) {
        this.oauth1Params[key] = value;
        return this;
    }
    /**
     * Remove a named oauth1Param
     */
    clearOauth1Param(key) {
        delete this.oauth1Params[key];
        return this;
    }
    /**
     * Define request body
     */
    field(key, value) {
        this.fields[key] = value;
        return this;
    }
    /**
     * Remove a field by its name
     */
    clearField(key) {
        delete this.fields[key];
        return this;
    }
    /**
     * Define request header
     */
    header(key, value) {
        this.headers[key] = value;
        return this;
    }
    /**
     * Remove a header by its name
     */
    clearHeader(key) {
        delete this.headers[key];
        return this;
    }
    /**
     * Set the request content type using a shortcut.
     */
    sendAs(type) {
        this.requestType = type;
        return this;
    }
    /**
     * Define how to parse the response
     */
    parseAs(type) {
        this.responseType = type;
        return this;
    }
    /**
     * Reset the client state
     */
    clear() {
        this.requestType = 'urlencoded';
        this.responseType = 'text';
        this.params = {};
        this.fields = {};
        this.headers = {};
        this.oauth1Params = {};
        return this;
    }
    /**
     * Make a post request
     */
    async post() {
        return this.getResponseBody(got_1.default.post(this.baseUrl, this.getGotOptions('POST')));
    }
    /**
     * Make a get request
     */
    async get() {
        return this.getResponseBody(got_1.default.get(this.baseUrl, this.getGotOptions('GET')));
    }
}
exports.HttpClient = HttpClient;
