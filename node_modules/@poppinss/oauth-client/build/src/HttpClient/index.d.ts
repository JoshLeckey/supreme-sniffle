/**
 * An HTTP client abstraction we need for making Oauth requests
 */
export declare class HttpClient {
    private baseUrl;
    requestType: 'json' | 'urlencoded';
    responseType: 'json' | 'text' | 'buffer';
    params: Record<string, any>;
    fields: Record<string, any>;
    headers: Record<string, any>;
    oauth1Params: Record<string, any>;
    constructor(baseUrl: string);
    /**
     * Returns the got options for the request
     */
    private getGotOptions;
    /**
     * Returns the response body of the got instance
     */
    private getResponseBody;
    /**
     * Define query string param
     */
    param(key: string, value: any): this;
    /**
     * Remove a named param
     */
    clearParam(key: string): this;
    /**
     * Define an oauth1 param that makes it way to the Authorization
     * header
     */
    oauth1Param(key: string, value: any): this;
    /**
     * Remove a named oauth1Param
     */
    clearOauth1Param(key: string): this;
    /**
     * Define request body
     */
    field(key: string, value: any): this;
    /**
     * Remove a field by its name
     */
    clearField(key: string): this;
    /**
     * Define request header
     */
    header(key: string, value: any): this;
    /**
     * Remove a header by its name
     */
    clearHeader(key: string): this;
    /**
     * Set the request content type using a shortcut.
     */
    sendAs(type: 'json' | 'urlencoded'): this;
    /**
     * Define how to parse the response
     */
    parseAs(type: 'json' | 'text' | 'buffer'): this;
    /**
     * Reset the client state
     */
    clear(): this;
    /**
     * Make a post request
     */
    post(): Promise<any>;
    /**
     * Make a get request
     */
    get(): Promise<any>;
}
